snippet f
  const ${1} = (${2}) => {
		${0}
  }

snippet if
  if (${1:true}) {
    ${0:TARGET}
  }

snippet if-else
abbr ife
  if (${1:#:condition}) {
		${2:TARGET}
  } else {
		${3}
  }

snippet cl
  console.log(${0:TARGET})

snippet cll
  console.log({ ${0:TARGET} })

snippet cdm
	componentDidMount() {
		${1}
	}

snippet cdup
	componentDidUpdate(prevProps, prevState) {
		${1}
	}

snippet cwm
	componentWillMount() {
		${1}
	}

snippet cwr
	componentWillReceiveProps(nextProps) {
		${1}
	}

snippet cwun
	componentWillUnmount() {
		${1}
	}

snippet cwu
	componentWillUpdate(nextProps, nextState) {
		${1}
	}

snippet pt
	propTypes: {
		${1}: PropTypes.${2:string}
	}

snippet rcs
	import React from 'react'
	import PropTypes from 'prop-types'

	const ${1:ClassName} = () => {
		return (
			${0:<div />}
		)
	}

	$1.propTypes = {}

	export default $1

snippet rcc
	import React from 'react'
	import PropTypes from 'prop-types'

	class ${1:ClassName} extends React.PureComponent {
	  static propTypes = {}

		render() {
			return (
				${0:<div />}
			)
		}
	}

	export default $1

snippet rc
	class ${1:ClassName} extends React.PureComponent {
		render() {
			return (
				${0:<div />}
			)
		}
	}

	export default _$1

snippet ren
	render() {
		return (
			${1:<div />}
		)
	}

snippet sst
	setState({
		${1}: ${2}
	})

snippet scu
	shouldComponentUpdate(nextProps, nextState) {
		${1}
	}

snippet props
	this.props.${1}

snippet state
	this.state.${1}
