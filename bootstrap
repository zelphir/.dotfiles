#!/usr/bin/env bash

################################################################################
# bootstrap
#
# This script is intended to set up a new Mac computer with my dotfiles and
# other development preferences.
################################################################################


################################################################################
# First, some helpful functions borrowed from Laptop. Thank you, thoughtbot. :)
################################################################################

# include my library helpers for colorized echo and require_brew, etc
source ./lib/helper.sh

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      running "Upgrading %s ..." "$1"
      brew upgrade "$@"
    else
      warn "Already using the latest version of %s. Skipping ..." "$1"
    fi
  else
    running "Installing %s ..." "$1"
    brew install "$@"
  fi
}

brew_is_installed() {
  local name="$(brew_expand_alias "$1")"

  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name="$(brew_expand_alias "$1")"

  ! brew outdated --quiet "$name" >/dev/null
}

brew_tap() {
  brew tap "$1" 2> /dev/null
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  running "Restarting %s ..." "$1"
  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -Fq "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}


################################################################################
# Next, a little more setup...
################################################################################

set -e # Terminate script if anything exits with a non-zero value
set -u # Prevent unset variables


################################################################################
# Variable declarations
################################################################################

osname=$(uname)
divider="====> "
COMMANDLINE_TOOLS="/Library/Developer/CommandLineTools"
DOTFILES_DIR=$HOME/.dotfiles

################################################################################
# Check for presence of command line tools if OS X
################################################################################

if [ ! -d "$COMMANDLINE_TOOLS" ]; then
  warn "Apple's command line developer tools must be installed before
running this script. To install them, just run 'gcc' from the terminal and
then follow the prompts. Once the command line tools have been installed,
you can try running this script again."
  exit 1
fi


################################################################################
# 2. Install oh-my-zsh
################################################################################

#running "$divider Step 2: Installing oh-my-zsh..."
#
#if [ -d "$HOME/.oh-my-zsh" ]; then
#  rm -rf $HOME/.oh-my-zsh
#fi
#
#git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
#
#ok "Done!"
#

################################################################################
# 3. Setup dotfiles
################################################################################

#running "$divider Step 3: Installing dotfiles..."
#if [[ -d $DOTFILES_DIR ]]; then
#  running "Backing up old dotfiles to $HOME/old_dotfiles_backup..."
#  rm -rf $OLD_DOTFILES_BACKUP
#  cp -R $DOTFILES_DIR $OLD_DOTFILES_BACKUP
#  rm -rf $DOTFILES_DIR
#fi
#
#running "Cloning your dotfiles repo to ${DOTFILES_DIR} ..."
#
#git clone $DOTFILES_REPO_URL -b $DOTFILES_BRANCH $DOTFILES_DIR
#source $DOTFILES_DIR/install.sh
#
#ok "Done!"


################################################################################
# 6. Install Powerline-patched fonts
################################################################################

running "$divider Step 6: Installing fixed-width fonts patched for use with Powerline symbols..."
if [ -d "$HOME/src/fonts" ]; then
  rm -rf $HOME/src/fonts
fi
git clone https://github.com/powerline/fonts.git $HOME/src/fonts
cd $HOME/src/fonts
./install.sh
cd $HOME
rm -rf $HOME/src/fonts

ok "Done!"


################################################################################
# 7. Install Vundle and vim plugins
################################################################################

#running "$divider Step 7: Installing Vundle and vim plugins..."
#if [ -d $HOME/.vim/bundle ]; then
#  rm -rf $HOME/.vim/bundle
#fi
#git clone https://github.com/gmarik/Vundle.vim.git $HOME/.vim/bundle/Vundle.vim
#cp -R $DOTFILES_DIR/vim/colors $HOME/.vim # So vim won't complain about solarized not being found.
#vim +PluginInstall +qall
#rm -rf $HOME/.vim/colors
#
#ok "Done!"


################################################################################
# 8. Install extra Homebrew packages
################################################################################

running "$divider Step 8: Installing extra Homebrew formulae..."

source "$DOTFILES_DIR/install/brew"

ok "Done!"


################################################################################
# 9. Install Cask and related software
################################################################################

running "$divider Step 9: Installing Cask and related software..."

brew_tap 'caskroom/cask'
brew_tap 'caskroom/versions'
source "$DOTFILES_DIR/install/brew-cask"

ok "Done!"


################################################################################
# 10. Set OS X preferences
################################################################################

running "$divider Step 10: Setting OS X preferences..."

source "$DOTFILES_DIR/install/osx-defaults"
source "$DOTFILES_DIR/install/osx-dock"

ok "Done!"


echo
echo "**********************************************************************"
echo "**** Mac Bootstrap script complete! Please restart your computer. ****"
echo "**********************************************************************"
echo
